// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: videos.sql

package db

import (
	"context"
)

const createVideo = `-- name: CreateVideo :one
INSERT INTO Videos (link, description)
VALUES ($1, $2)
RETURNING id, link, description
`

type CreateVideoParams struct {
	Link        string `json:"link"`
	Description string `json:"description"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, createVideo, arg.Link, arg.Description)
	var i Video
	err := row.Scan(&i.ID, &i.Link, &i.Description)
	return i, err
}

const getVideoByID = `-- name: GetVideoByID :one
SELECT id, link, description FROM Videos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVideoByID(ctx context.Context, id int32) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideoByID, id)
	var i Video
	err := row.Scan(&i.ID, &i.Link, &i.Description)
	return i, err
}

const listVideos = `-- name: ListVideos :many
SELECT id, link, description FROM Videos
ORDER BY id
LIMIT $2
OFFSET $1
`

type ListVideosParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListVideos(ctx context.Context, arg ListVideosParams) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, listVideos, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Video{}
	for rows.Next() {
		var i Video
		if err := rows.Scan(&i.ID, &i.Link, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
